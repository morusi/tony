#
wget https://pypi.python.org/packages/source/I/IPy/IPy-0.82a.tar.gz --no-check-certificate

from IPy import IP
ip = IP('192.168.0.1/16')
print ip.len()
for x in ip:
    print(x)

from IPy import IP
ip = IP('192.168.1.20')
ip.reverseNames() # 反向解析地址
ip.iptype() # ip 为私有网类型"PRIVATE"
IP('8.8.8.8').iptype() # ip为公网类型
IP("8.8.8.8").int() # 转换为整数格式
IP("8.8.8.8").strHex() # 转换为16进制格式
IP("8.8.8.8").strBin() # 转换为2进制格式

print(IP(0x80808080)) # 16 进制转换为IP地址

from IPy import IP # 根据IP与掩码生成网段
print(IP('192.168.1.0').make_net('255.255.255.0'))
print(IP('192.168.1.0/255.255.255.0',make_net=True))
print(IP('192.168.1.0-192.168.1.255',make_net=True)) 


也可以通过strNormal方法指定不同wantprefixlen参数值以定制不同输出类型的网段。
输出类型为字符串，如下：
IP('192.168.1.0/24').strNormal(0) # wantprefixlen = 0，无返回，如192.168.1.0；
IP('192.168.1.0/24').strNormal(1) # wantprefixlen = 1，prefix格式，如192.168.1.0/24；
IP('192.168.1.0/24').strNormal(2) # wantprefixlen = 2，decimalnetmask格式，如192.168.1.0/255.255.255.0；
IP('192.168.1.0/24').strNormal(3) # wantprefixlen = 3，lastIP格式，如192.168.1.0-192.168.1.255。

计算网络是否存在包含,重叠等关系
IP('10.0.0.0/24') < IP('12.0.0.0/24')
'192.168.1.100' in IP('192.168.1.0/24')
IP('192.168.1.0/24') in IP('192.168.0.0/16')
判断两个网段是否存在重叠,采用IPy 提供的overlaps方法:
IP('192.168.0.0/23').overlaps('192.168.1.0/24') # 返回1 代表存在重叠 
IP('192.168.1.0/24').overlaps('192.168.2.0') # 返回0 代表不存在重叠

根据输入的IP或子网 返回网络,掩码,广播,反向解析,子网数,IP类型等信息
#!/usr/bin/env python
from IPy import IP
ip_s = raw_input('Please input an IP or net-range:') #接受用户输入,参数为IP地址或网段地址
ips = IP(ip_s) 
if len(ips) > 1:
    print ('net: %s' % ips.net()) # 输出网络地址
    print ('netmask: %s' % ips.netmask()) # 输出网络掩码地址
    print ('broadcast: %s' % ips.broadcast())  # 输出网络广播地址
    print ('reverse address: %s' % ips.reverseNames()[0]) # 输出地址反向解析
    print ('subnet: %s' % len(ips)) #输出网络子网数
else:  # 为单个IP
    print ('reverse address: %s' % ips.reverseNames()[0])  # 输出IP反向解析
print ('hexadecimal: %s' % ips.strHex()) # 输出16进制地址
print ('binary ip: %s' % ips.strBin()) # 输出2进制地址
print ('iptyep: %s' % ips.iptype()) # 输出地址类型 
